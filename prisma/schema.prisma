datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EventType {
  reservation
  exam
  workshop
  lecture
  other
}

enum Permission {
  admin
  scrapersCrud
  scrapersRead
}

model ScheduledEvent {
  id          String    @id @default(cuid())
  title       String
  description String?
  code        String
  type        EventType @default(other)
  groups      String[]  @default([])
  room        String
  begin       DateTime
  end         DateTime
  hosts       String[]  @default([])

  @@unique([type, groups, begin, code])
  @@index([code], type: Hash)
  @@index([type], type: Hash)
  @@index([begin(sort: Desc), code(sort: Desc)])
}

model User {
  id          String            @id @default(uuid()) @db.Uuid
  name        String
  email       String            @unique
  groups      UserGroups[]
  scrapers   Scraper[]
  sessions    UserSession[]
  permissions UserPermissions[]
}

model UserSession {
  token        String   @id @unique @default(dbgenerated("encode(gen_random_bytes(384), 'hex')"))
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
  expiresAfter DateTime @default(dbgenerated("now() + interval '1 week'"))
}

model UserPermissions {
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @db.Uuid
  permission Permission

  @@unique([userId, permission])
}

model UserGroups {
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  group  String

  @@unique([userId, group])
}

model Scraper {
  id      String          @id @default(uuid()) @db.Uuid
  alias   String?
  owner   User            @relation(fields: [ownerId], references: [id])
  ownerId String          @db.Uuid
  tokens  ScraperToken[]

  @@unique([alias, ownerId])
}

model ScraperToken {
  token      String   @unique @default(dbgenerated("encode(gen_random_bytes(384), 'hex')"))
  scraper   Scraper @relation(fields: [scraperId], references: [id], onDelete: Cascade)
  scraperId String   @db.Uuid
  when       DateTime @default(now())

  @@unique([token, scraperId])
}
